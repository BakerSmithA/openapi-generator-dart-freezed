{{#vendorExtensions.x-is-pure}}
    {{>serialization/freezed/class_factory_general}}
{{/vendorExtensions.x-is-pure}}

{{^vendorExtensions.x-is-pure}}
    {{#vendorExtensions.x-is-child}}
        {{^hasDiscriminatorWithNonEmptyMapping}}
            {{>serialization/freezed/class_factory_general}}
        {{/hasDiscriminatorWithNonEmptyMapping}}
    {{/vendorExtensions.x-is-child}}
{{/vendorExtensions.x-is-pure}}

{{^vendorExtensions.x-is-pure}}
    {{#hasDiscriminatorWithNonEmptyMapping}}
            {{#vendorExtensions.x-oneOf-helper-properties}}
                {{! 
                Set unionKey, so we can use freezed deserialisation
                https://pub.dev/packages/freezed#deserializing-generic-classes
                }}
                const factory {{classname}}.typed{{#lambda.titlecase}}{{mappingName}}{{/lambda.titlecase}}({
                    {{#allOneOfVars}}
                        {{#description}}
                            /// [{{name}}] - {{{.}}}
                        {{/description}}
                        @JsonKey(name: r'{{baseName}}') {{>serialization/freezed/variable_type}} {{name}},
                    {{/allOneOfVars}}
                }) = {{modelName}};
            {{/vendorExtensions.x-oneOf-helper-properties}}

            {{! 
            Helper methods to make it easier to construct model oneOf classes.
            Instead of needing to create a new model object, and wrap that with 
            const factory constructor above, these helper methods take the 
            properties on the model classes directly.
            }}
            {{#vendorExtensions.x-oneOf-helper-properties}}
                {{#varsMaybeWithoutDiscriminator}}
                    {{#description}}
                        /// [{{name}}] - {{{.}}}
                    {{/description}}
                {{/varsMaybeWithoutDiscriminator}}
                factory {{classname}}.{{#lambda.camelcase}}{{mappingName}}{{/lambda.camelcase}}({
                    {{#varsMaybeWithoutDiscriminator}}
                        {{>serialization/freezed/variable_type}} {{name}},
                    {{/varsMaybeWithoutDiscriminator}}
                }) {
                    return {{classname}}.typed{{#lambda.titlecase}}{{mappingName}}{{/lambda.titlecase}}(
                        {{! 
                        If discriminatorEnumValue has been automatically inferred,
                        the user doesn't need to provide it in the arguments and
                        it will be added automatically here.
                        }}
                        {{#discriminatorEnumValue}}
                            {{discriminatorKey}}: {{discriminatorEnumValue}},
                        {{/discriminatorEnumValue}}
                        {{#varsMaybeWithoutDiscriminator}}
                        {{name}}: {{name}},
                        {{/varsMaybeWithoutDiscriminator}}
                    );
                }
            {{/vendorExtensions.x-oneOf-helper-properties}}
    {{/hasDiscriminatorWithNonEmptyMapping}}
{{/vendorExtensions.x-is-pure}}
{{^vendorExtensions.x-is-pure}}
    {{^vendorExtensions.x-is-child}}
        {{^hasDiscriminatorWithNonEmptyMapping}}
                {{#anyOf}}
                    const factory {{classname}}.as{{#lambda.titlecase}}{{#PrimitiveInUnion}}{{#lambda.camelcase}}{{{.}}}{{/lambda.camelcase}}{{/PrimitiveInUnion}}{{/lambda.titlecase}}({
                        {{#lambda.titlecase}}{{#PrimitiveInUnion}}{{{.}}}{{/PrimitiveInUnion}}{{/lambda.titlecase}} {{#lambda.camelcase}}{{{.}}}Value{{/lambda.camelcase}}
                    ) = {{classname}}As{{#lambda.titlecase}}{{#PrimitiveInUnion}}{{#lambda.camelcase}}{{{.}}}{{/lambda.camelcase}}{{/PrimitiveInUnion}}{{/lambda.titlecase}};
                {{/anyOf}}
                {{#oneOf}}
                    const factory {{classname}}.as{{#lambda.titlecase}}{{#PrimitiveInUnion}}{{#lambda.camelcase}}{{{.}}}{{/lambda.camelcase}}{{/PrimitiveInUnion}}{{/lambda.titlecase}}(
                        {{#lambda.titlecase}}{{#PrimitiveInUnion}}{{{.}}}{{/PrimitiveInUnion}}{{/lambda.titlecase}} {{#lambda.camelcase}}{{{.}}}Value{{/lambda.camelcase}}
                    ) = {{classname}}As{{#lambda.titlecase}}{{#PrimitiveInUnion}}{{#lambda.camelcase}}{{{.}}}{{/lambda.camelcase}}{{/PrimitiveInUnion}}{{/lambda.titlecase}};
                {{/oneOf}}
        {{/hasDiscriminatorWithNonEmptyMapping}}
    {{/vendorExtensions.x-is-child}}
{{/vendorExtensions.x-is-pure}}